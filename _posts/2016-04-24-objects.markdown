---
layout: post
title:  "Why almost everything is an object in JS"
date:   2016-04-24 13:00:00 +0100
categories: Javascript
---

Wow wow wow, that thing of exploring javascript starts to be exciting. 

Every blog, book or whatever I'm reading about Javascript, at a certain point is mentioning that in Javascript almost everything is an object. What does that mean exactly? Let's have a look at it.

### Data types: primitives vs object ###
In Javascript we have 7 data types. The following 6 are primitives:

* Boolean
* Null
* Undefined
* Number
* String
* Symbol (new in ECMAScript 6)

and then we have the **object**, which is the only one not to be primitive. Why?

Well, first of all **primitives are immutable**, which means they're always equals to themselves.
To clarify: a number data type will always be a number, a string will always be a string, and so on.

In the case of the object is different: in fact, an object consists in a list of primitive data types (and sometimes reference data types) that is stored as a series of key-value pairs. Each item in the list is called a property (functions are called methods). 

Example below:

```javascript
var superCoolObject = {
	name: 'String Name',
	age: 24 //number
	sayHello: function(){ alert ('Hello');} //method
}
```
So, in the object above we have three key-value pairs: a string, a number and a function. We can easily understand the **mutable nature of the object**, compared to its primitive 'cousins'.

Another important aspect is the way values are associated. In primitives data type the value association to the variable is direct. Example:

to be continued