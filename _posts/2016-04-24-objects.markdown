---
layout: post
title:  "Why almost everything is an object in JS"
date:   2016-04-24 13:00:00 +0100
categories: Javascript
---

Every blog, book or whatever I'm reading about Javascript, at a certain point is mentioning that in Javascript almost everything is an object. What does that mean exactly? Let's have a look at it.

### Data types: primitives and object ###
In Javascript we have 7 data types. The following 6 are primitives:

* Boolean
* Null
* Undefined
* Number
* String
* Symbol (new in ECMAScript 6)

The **object** is the only data type **not to be** primitive. Why?

First reason is **primitives are immutable**, which means they're always equals to themselves. A number data type will always be a number, a string will always be a string, and so on.

Dissimilarly, an object consists in a list of primitives data types (and sometimes reference data types) that is stored as a series of key-value pairs. Each item in the list is called a property (functions are called methods). 

Example below:

```javascript
var superCoolObject = {
	name: 'String Name', //property string
	age: 24 //property number
	sayHello: function(){ alert ('Hello');} //method
}
```

In the object above we have three key-value pairs: a string, a number and a function. We can easily understand the **mutable nature of the object**, compared to its primitive.

Another important aspect is the way values are associated. In primitives the association of the value to the variable is direct. Example:

```javascript
var color = "red";
var colorInstance = color;
color = "yellow";

console.log(colorInstance); //red
console.log(color); //yellow
```

As it can be seen, the variable `colorInstance` takes the initial value of the variable `color`, which is "red". Subsequently, the value of `color` is changed to "yellow". When we console log the two variables we see that `colorInstance` kept the initial value of `color`, which is "red", while `color` has the most recent value "yellow". That happens because the value is stored into the variable at the moment of the association, it that sense we can say the association is direct.

Differently, in objects the value is stored as a reference. See below.

```javascript
var color = {
	name: "red"
	}
var colorInstance = color;
color.name = "yellow";

console.log(color.name); //yellow
console.log(colorInstance.name); //yellow
```

A key-value pair is created when declaring the `color` object, where “name” has the string "red"`. A new variable `colorInstance` is then created, and associated to the `color` object.
What happens when the value of `color.name` is subsequently changed? 
As it can be seen, the value of colorInstance.name changes too. 
That is because the value is stored as a reference in an object. When a given object is stored into a new variable, its reference is inherited and stored too.

### Where things get confusing ###
So far we've seen that primitives are immutable, and their value is directly stored in the variable. Objects instead, store their values by reference, in a key-value format, where the value can be either a number, a string or a function (method). 
Crystal clear. However, how can be explained the below?

```javascript
var a="I'm a string"; // string is a primitive

var b = a.toLowerCase(); // What? how can a primitive have a method?!
```

**How can a string, which is a primitive, have a method?** 

The above is possible because Javascript, behind the scenes, "wrap" the primitive value in an object, which is called **wrapper object**. Note that is true only for the primitives `String`, `Number` and `Boolean`. `Undefined` and `Null` do not have a wrapper object.

Below is reported what happens step by step, when Javascript runs and a built-in property for a given primitive is executed. Let's take as example the `toLowerCase()` method, which is applied to the string primitive. The scenario is really simple, Javascript runs, find on its way `a.toLowerCase()` and executes it:

1. Javascript creates a wrapper `String` object from `a`, which means it computes `new String(a)`
2. then, it calls the `toLowerCase()` method from the string object previously created
3. `toLowerCase()` is performed on the string `a`
3. the string wrapper object is discarded
4. `a` lowercase string is returned in the variable `b`. 

Note that what is returned is still a primitive, not an object. As said, the string will always be a primitive and equals to itself. The trick Javascript does, for commodity, is to do the passage automatically for us, using the String constructor to access the built-in methods, operating whatever is needed, and returning back the value as a primitive. Nice one!

### What about functions? ###
Functions are objects, whenever we create a function in Javascript we are calling the `Function` constructor.

```javascript
new Function ([arg1[, arg2[, ...argN]],] functionBody)
```

**Why typeof does return function?**

You may have noticed that if you evaulate a function with `typeof`, you'll get as result `function` instead of `object`.

```javascript
var a = function(){
	alert('Hi bud!');
};

console.log(typeof a);
// function

```

We know of course that a function is an object. However, Javascript `typeof` prefers to return `function` for better readability.

### Undefined and null ###
We didn't speak about undefined and null so far. As it has been said previously they are two primitives. 

**Undefined** means a variable has been created but has not yet a value assigned. Undefined is a type itself.

**Null** represents an assignment to a variable and it indicates *no value*. If you run `typeof null` you'll see that `object` is returned. Pretty weird if you consider that `null` is supposed to be a primitive. 

The reason for this was actually an error in the original implementation of JavaScript. The error was then copied in ECMAScript. Nevertheless, it is rationalized that null is considered a placeholder for an object, even though, technically, it is a primitive value.


There is much more to say about the nature of Javascript and especially about objects. However, the purpose of this article is just to give a first understanding of data types and why object is so special and predominant in Javascript. More insights will follow. Back to [home](/).  
