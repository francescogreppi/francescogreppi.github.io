---
layout: post
title:  "Object Oriented Programming in JS"
date:   2016-05-04 14:00:00 +0100
categories: Javascript
comments: false
---

### Why objects are great ###

Objects are the perfect formalization of the world we experience. They literally act like the objects we see in a real life situation. Think about a pen. It has properties like shape, length or color and it has methods (actions) as well, for instance writing or drawing.

As we've seen in a precedent article, Javascript is structurally made of objects. However, with Javascript we can make our own objects and use them to encapsulate events that fire whenever is needed.
This development approach is known as *Object Oriented Programming* (OOP) and it refers to using self-contained pieces of code (objects) to represent a specific functionality/behavior of an application.

Thanks to objects it is possible to adopt some really useful techniques such as *Inheritance* (objects can inherit features from other objects), *Polymorphism* (objects can share the same interface - how they are accessed and used—while their underlying implementation of the interface may differ), and *Encapsulation* (each object is responsible for specific tasks). We'll see them soon.

### Create an object ###

You can create an object in three ways, the first one is **Literal Notation**. Here's an example:

```javascript

	var person = {
		firstName : "John",
		lastName : "Doe",
		age: 25,
		height: 180
	}

```
Another way you can create an object is by using the Javascript Keyword `new`. Here's how it looks like:

```javascript

	var person = new Object();

	person.firstName = "John";
	person.lastName = "Doe";
	person.age = 25;
	person.height = 180;

```
As you may notice by comparing the two examples above, the Javascript Keyword `new` method is less readable and requires more statements. With literal notation you can define and create an object in one single statement, providing at a single glance the structure of the object. That's why literal notation way is preferable when creating objects.

The last way of creating object is by using an **object constructor** and here is where things get more interesting. In the previous examples we created a single object which stand by itself. What if we want to create a **structure** which can then be used to create multiple object instances? Well, in that case an object constructor is coming to save us. Let's have a look to an example:

```javascript

	//I create my object structure via an object constructor
	function person(first, last, age, height) {
		this.firstName = first;
		this.lastName = last;
		this.age = age;
		this.height = height;
	}

	//I create multiple instances via the javascript keyword new
	var myBruv = new person("Mark", "Doe", 30, 185);
	var mySis = new person("Hannah", "Doe", 22, 170);

```

#### What is an object constructor ####
Technically is a regular JavaScript function, and it comes with all the advantages of it (i.e. possibility of passing parameters and having nested functions). The only difference between a function and a constructor is that the latter is called via the `new` operator, which is the Javascript keyword we use to create objects. Also, in an object constructor we use `this` to reference the properties and methods related to an object.

#### What about 'this'? ####
In JavaScript we consider `this` that entity (the object) within a constructor to which associated properties and methods belong. The value of this will become the new object when the constructor is used to create an object. Example:

```javascript

	// constructor
	function laptop(brand, model, price) {
		// "this" can be considered as a placeholder for the instance we are going to create later
		this.brand = brand;
		this.model = model;
		this.price = price;
	}

	// when we create an object via new keyword
	// "this" is replaced by the variable we declared (our new object)
	var lenovoLaptop = new laptop("Lenovo", "T450s", "£999");

```

#### ... and prototype? ####
At this point things get quite interesting. As we previously said a constructor is a function and a function is a special kind of object with its own properties.
**Prototype** is one of those and it's just an empty object (apart from built-ins such as date). When an object is constructed, it inherits all of the properties of its constructor’s prototype, as follows.

```javascript

	// the Dog prototype initially empty get the breed property
	Dog.prototype.breed = "English Setter";
	// I create the Dog instance via new keyword
	var bobby= new Dog;
	//constructor inherits prototype properties if any
	bobby.breed;         // English Setter

```
The `bobby` instance get the breed property from Dog‘s prototype. This kind of inheritance is more than copying properties to the new objects. The object is made to reflect the changes happening in its constructor’s prototype. That means that it's possible to change the prototype later, and see the changes reflected in the instance.
At this point should be clear what is the difference between a prototype and an object constructor function.
A constructor is a pointer while prototype is a property of Function() objects. No other type of objects have this property.

#### Encapsulation and Inheritance ####
We actually see these two important properties of objects taking place in the previous examples. However let's see more in details what they do represent.

The term *encapsulation* refers to enclosing all the properties and methods of an object within that object so that they are hidden from the rest of the application. Why do we need that? Because we want to write a clean and well structured code. We want localize in an object and abstract specific sets of properties/methods.

What do we mean by abstracting a specific set of properties and methods? The *abstraction principle* is at the foundation of computer programming and it aims to reduce redundant code:

- each significant piece of functionality in a program should be implemented in a single place in the source code;
- if some functionalities are similar between them, then it is recommended to declare the common parts into a single place;

This principle is important in this context because it helps to better understand object *inheritance* and why it is so powerful. Inheritance refers to an object being able to inherit methods and properties from a parent object. Example below:

```javascript

	// constructor
	function City(name, population, country) {
		this.name = name;
		this.population = population;
		this.country = country;
	}

	var London = new City("London", "8 million", "United Kingdom");

```

In the example above, `London` is an object that is created from the `City` constructor function. Both `London` and `City` are objects (in case of `City` remember that functions are objects). The only difference between the two is that one is an *instance* of the other. What an instance is? An instance can be considered as an implementation of a function (the constructor), hence a copy of an object.
*Inheritance happens when an instance is created*, and so all the properties and methods of the constructor an inherited by the object (instance) created. That's an extremely powerful concept if we want to develop maintainable, efficient and scalable applications.

#### Polymorphism ####
From Greek *polymorphos* where *poli = many* and *morphe = shape, form*. It refers to the ability of an object to provide different behaviors in different state of objects. Let's see with an example what does that mean:

```javascript
	// I create a super class something that lives
	function SomethingThatLives(name, age){
		this.name = name;
		this.age = age;
	}

	// I create an instance of the super class
	var Oliver = new SomethingThatLives('Oliver', 5);

	// I add a behavior to the super class
	Animal.prototype.sayHello = function(){
		return 'Hello!';
	}

	// I create a sub class
	function Cat(name, age){
		this.name = name;
		this.age = age;
	}

	Cat.prototype = new SomethingThatLives();

	// I extend the subclass with a new method
	Cat.prototype.sayHello = function (){
		return 'Meow!';
	}

	var Morgan = new Cat('Morgan', 4);
	Morgan.sayHello(); // Meow!
	Oliver.sayHello(); // Hello!

```
In the example above I created a super class `SomethingThatLives`, then I created an instance of `SomethingThatLives`, `Oliver`. The object inherits the properties of the super class. When I want to extend the super class with additional properties or methods I can use prototype. In the example above I extended the super class `SomethingThatLives` with the method `sayHello()`, which returns 'Hello!'. "Things that live" it's quite a wide and heterogeneous group with different characteristic. Let's assume I want to create some other instance of `SomethingThatLives`, for instance `Morgan`, which is a cat. To do that I can create a subclass of `SomethingThatLives`, 'Cat', then I can extend it wit the same method `sayHello()`. In this case, it will return 'Meow!'. So as seen in the example Polymorphism happens when objects belonging to the same super class can have the same methods behaving in different ways.

In this article we have seen briefly the most important concepts of OOP in Javascript. With OOP we can use self-contained pieces of code to develop applications, objects. Building applications with objects allows us to adopt some useful techniques such as **Inheritance** (objects can inherit properties from other objects), **Polymorphism** (object with different behaviors in different state of objects), and **Encapsulation** (each object is responsible for specific tasks).

That's all for now, hope you have enjoyed.

Back to [home](/).